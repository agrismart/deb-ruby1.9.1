#! /bin/sh /usr/share/dpatch/dpatch-run
## 100503_r27356_queue_race.diff.dpatch by Daigo Moriwaki <daigo@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Back port from the upstream r27356.
## DP: remove code that kicks waiting thread twice, which caused race and
## DP: deadlock.  [ruby-core:25537]

@DPATCH@
Index: b/lib/thread.rb
===================================================================
--- a/lib/thread.rb	2010-07-20 21:45:44.000000000 +0900
+++ b/lib/thread.rb	2010-07-20 21:46:18.000000000 +0900
@@ -144,7 +144,6 @@
   # Pushes +obj+ to the queue.
   #
   def push(obj)
-    t = nil
     @mutex.synchronize{
       @que.push obj
       begin
@@ -154,10 +153,6 @@
         retry
       end
     }
-    begin
-      t.run if t
-    rescue ThreadError
-    end
   end
 
   #
@@ -176,8 +171,8 @@
   # thread isn't suspended, and an exception is raised.
   #
   def pop(non_block=false)
-    while true
-      @mutex.synchronize{
+    @mutex.synchronize{
+      while true
         if @que.empty?
           raise ThreadError, "queue empty" if non_block
           @waiting.push Thread.current
@@ -185,8 +180,8 @@
         else
           return @que.shift
         end
-      }
-    end
+      end
+    }
   end
 
   #
@@ -289,7 +284,6 @@
   # until space becomes available.
   #
   def push(obj)
-    t = nil
     @mutex.synchronize{
       while true
         break if @que.length < @max
@@ -305,11 +299,6 @@
         retry
       end
     }
-    
-    begin
-      t.run if t
-    rescue ThreadError
-    end
   end
 
   #
@@ -327,7 +316,6 @@
   #
   def pop(*args)
     retval = super
-    t = nil
     @mutex.synchronize {
       if @que.length < @max
         begin
@@ -338,10 +326,6 @@
         end
       end
     }
-    begin
-      t.run if t
-    rescue ThreadError
-    end
     retval
   end
 
Index: b/test/thread/test_queue.rb
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ b/test/thread/test_queue.rb	2010-07-20 21:46:18.000000000 +0900
@@ -0,0 +1,38 @@
+require 'test/unit'
+require 'thread'
+
+class TestQueue < Test::Unit::TestCase
+  def test_queue
+    grind(5, 1000, 15, Queue)
+  end
+
+  def test_sized_queue
+    grind(5, 1000, 15, SizedQueue, 1000)
+  end
+
+  def grind(num_threads, num_objects, num_iterations, klass, *args)
+    from_workers = klass.new(*args)
+    to_workers = klass.new(*args)
+
+    workers = (1..num_threads).map {
+      Thread.new {
+        while object = to_workers.pop
+          from_workers.push object
+        end
+      }
+    }
+
+    Thread.new {
+      num_iterations.times {
+        num_objects.times { to_workers.push 99 }
+        num_objects.times { from_workers.pop }
+      }
+    }.join
+  
+    num_threads.times { to_workers.push nil }
+    workers.each { |t| t.join }
+
+    assert 0, from_workers.size
+    assert 0, to_workers.size
+  end
+end
