commit e3ddc193780f7e849e4b6ee4cc81a47b383f73b5
Author: John Leach <john@brightbox.co.uk>
Date:   Fri Nov 22 18:28:23 2013 +0000

    Rubygems 1.8.28

diff --git a/bin/gem b/bin/gem
index a4ec754..7cea2a5 100755
--- a/bin/gem
+++ b/bin/gem
@@ -5,6 +5,15 @@
 # See LICENSE.txt for permissions.
 #++
 
+# The prelude in 1.9.1 injects rubygems.rb into $LOADED_FEATURES
+# which prevents the `require 'rubygems'` from actually loading
+# the site's version of rubygems. So we have to use it's API
+# to get it's prelude out of the way.
+#
+if RUBY_VERSION =~ /^1\.9\.1/ && defined?(Gem::QuickLoader)
+  Gem::QuickLoader.load_full_rubygems_library
+end
+
 require 'rubygems'
 require 'rubygems/gem_runner'
 require 'rubygems/exceptions'
diff --git a/lib/rubygems.rb b/lib/rubygems.rb
index 7ed2746..58c6655 100644
--- a/lib/rubygems.rb
+++ b/lib/rubygems.rb
@@ -121,7 +121,7 @@ require "rubygems/deprecate"
 # -The RubyGems Team
 
 module Gem
-  VERSION = '1.8.23'
+  VERSION = '1.8.28'
 
   ##
   # Raised when RubyGems is unable to load or activate a gem.  Contains the
diff --git a/lib/rubygems/commands/setup_command.rb b/lib/rubygems/commands/setup_command.rb
index 0c95739..cf0fdd0 100644
--- a/lib/rubygems/commands/setup_command.rb
+++ b/lib/rubygems/commands/setup_command.rb
@@ -165,7 +165,7 @@ By default, this RubyGems will install gem as:
                              end
 
         dest_file = File.join bin_dir, bin_file_formatted
-        bin_tmp_file = File.join Dir.tmpdir, bin_file
+        bin_tmp_file = File.join Dir.tmpdir, "#{bin_file}.#{$$}"
 
         begin
           bin = File.readlines bin_file
@@ -209,7 +209,10 @@ TEXT
     say "Installing RubyGems" if @verbose
 
     Dir.chdir 'lib' do
-      lib_files = Dir[File.join('**', '*rb')]
+      lib_files =  Dir[File.join('**', '*rb')]
+
+      # Be sure to include our SSL ca bundles
+      lib_files += Dir[File.join('**', '*pem')]
 
       lib_files.each do |lib_file|
         dest_file = File.join lib_dir, lib_file
diff --git a/lib/rubygems/custom_require.rb b/lib/rubygems/custom_require.rb
old mode 100644
new mode 100755
diff --git a/lib/rubygems/ext/builder.rb b/lib/rubygems/ext/builder.rb
index 5e51896..27b3620 100644
--- a/lib/rubygems/ext/builder.rb
+++ b/lib/rubygems/ext/builder.rb
@@ -4,8 +4,18 @@
 # See LICENSE.txt for permissions.
 #++
 
+require 'thread'
+
 class Gem::Ext::Builder
 
+  ##
+  # The builder shells-out to run various commands after changing the
+  # directory.  This means multiple installations cannot be allowed to build
+  # extensions in parallel as they may change each other's directories leading
+  # to broken extensions or failed installations.
+
+  CHDIR_MUTEX = Mutex.new # :nodoc:
+
   def self.class_name
     name =~ /Ext::(.*)Builder/
     $1.downcase
@@ -16,12 +26,6 @@ class Gem::Ext::Builder
       raise Gem::InstallError, "Makefile not found:\n\n#{results.join "\n"}"
     end
 
-    mf = File.read('Makefile')
-    mf = mf.gsub(/^RUBYARCHDIR\s*=\s*\$[^$]*/, "RUBYARCHDIR = #{dest_path}")
-    mf = mf.gsub(/^RUBYLIBDIR\s*=\s*\$[^$]*/, "RUBYLIBDIR = #{dest_path}")
-
-    File.open('Makefile', 'wb') {|f| f.print mf}
-
     # try to find make program from Ruby configure arguments first
     RbConfig::CONFIG['configure_args'] =~ /with-make-prog\=(\w+)/
     make_program = $1 || ENV['make']
@@ -29,13 +33,16 @@ class Gem::Ext::Builder
       make_program = (/mswin/ =~ RUBY_PLATFORM) ? 'nmake' : 'make'
     end
 
-    ['', ' install'].each do |target|
-      cmd = "#{make_program}#{target}"
-      results << cmd
-      results << `#{cmd} #{redirector}`
+    destdir = '"DESTDIR=%s"' % ENV['DESTDIR'] if RUBY_VERSION > '2.0'
 
-      raise Gem::InstallError, "make#{target} failed:\n\n#{results}" unless
-        $?.success?
+    ['', 'install'].each do |target|
+      # Pass DESTDIR via command line to override what's in MAKEFLAGS
+      cmd = [
+        make_program,
+        destdir,
+        target
+      ].join(' ').rstrip
+      run(cmd, results, "make #{target}".rstrip)
     end
   end
 
@@ -43,12 +50,12 @@ class Gem::Ext::Builder
     '2>&1'
   end
 
-  def self.run(command, results)
+  def self.run(command, results, command_name = nil)
     results << command
     results << `#{command} #{redirector}`
 
     unless $?.success? then
-      raise Gem::InstallError, "#{class_name} failed:\n\n#{results.join "\n"}"
+      raise Gem::InstallError, "#{command_name || class_name} failed:\n\n#{results.join "\n"}"
     end
   end
 
diff --git a/lib/rubygems/ext/ext_conf_builder.rb b/lib/rubygems/ext/ext_conf_builder.rb
index b3d588d..7f75b39 100644
--- a/lib/rubygems/ext/ext_conf_builder.rb
+++ b/lib/rubygems/ext/ext_conf_builder.rb
@@ -6,18 +6,58 @@
 
 require 'rubygems/ext/builder'
 require 'rubygems/command'
+require 'fileutils'
+require 'tempfile'
 
 class Gem::Ext::ExtConfBuilder < Gem::Ext::Builder
+  FileEntry = FileUtils::Entry_ # :nodoc:
 
   def self.build(extension, directory, dest_path, results)
-    cmd = "#{Gem.ruby} #{File.basename extension}"
-    cmd << " #{Gem::Command.build_args.join ' '}" unless Gem::Command.build_args.empty?
+    tmp_dest = Dir.mktmpdir(".gem.", ".")
 
-    run cmd, results
+    t = nil
+    Tempfile.open %w"siteconf .rb", "." do |siteconf|
+      t = siteconf
+      siteconf.puts "require 'rbconfig'"
+      siteconf.puts "dest_path = #{(tmp_dest || dest_path).dump}"
+      %w[sitearchdir sitelibdir].each do |dir|
+        siteconf.puts "RbConfig::MAKEFILE_CONFIG['#{dir}'] = dest_path"
+        siteconf.puts "RbConfig::CONFIG['#{dir}'] = dest_path"
+      end
 
-    make dest_path, results
+      siteconf.flush
+
+      rubyopt = ENV["RUBYOPT"]
+      destdir = ENV["DESTDIR"]
+
+      begin
+        ENV["RUBYOPT"] = ["-r#{siteconf.path}", rubyopt].compact.join(' ')
+        cmd = [Gem.ruby, File.basename(extension), *Gem::Command.build_args].join ' '
+
+        run cmd, results
+
+        ENV["DESTDIR"] = nil
+        ENV["RUBYOPT"] = rubyopt
+        siteconf.unlink
+
+        make dest_path, results
+
+        if tmp_dest
+          FileEntry.new(tmp_dest).traverse do |ent|
+            destent = ent.class.new(dest_path, ent.rel)
+            destent.exist? or File.rename(ent.path, destent.path)
+          end
+        end
+      ensure
+        ENV["RUBYOPT"] = rubyopt
+        ENV["DESTDIR"] = destdir
+      end
+    end
+    t.unlink if t and t.path
 
     results
+  ensure
+    FileUtils.rm_rf tmp_dest if tmp_dest
   end
 
 end
diff --git a/lib/rubygems/indexer.rb b/lib/rubygems/indexer.rb
index e87e5a3..ddd4435 100644
--- a/lib/rubygems/indexer.rb
+++ b/lib/rubygems/indexer.rb
@@ -584,6 +584,9 @@ class Gem::Indexer
     specs = map_gems_to_specs updated_gems
     prerelease, released = specs.partition { |s| s.version.prerelease? }
 
+    Gem::Specification.dirs = []
+    Gem::Specification.add_specs(*specs)
+
     files = build_marshal_gemspecs
 
     Gem.time 'Updated indexes' do
diff --git a/lib/rubygems/installer.rb b/lib/rubygems/installer.rb
index 514316f..9956e3f 100644
--- a/lib/rubygems/installer.rb
+++ b/lib/rubygems/installer.rb
@@ -538,10 +538,12 @@ TEXT
 
 
       begin
-        Dir.chdir extension_dir do
-          results = builder.build(extension, gem_dir, dest_path, results)
+        Gem::Ext::Builder::CHDIR_MUTEX.synchronize do
+          Dir.chdir extension_dir do
+            results = builder.build(extension, gem_dir, dest_path, results)
 
-          say results.join("\n") if Gem.configuration.really_verbose
+            say results.join("\n") if Gem.configuration.really_verbose
+          end
         end
       rescue
         results = results.join "\n"
diff --git a/lib/rubygems/package/tar_input.rb b/lib/rubygems/package/tar_input.rb
index 77b4d69..5d79938 100644
--- a/lib/rubygems/package/tar_input.rb
+++ b/lib/rubygems/package/tar_input.rb
@@ -5,7 +5,6 @@
 #--
 
 require 'zlib'
-Gem.load_yaml
 
 class Gem::Package::TarInput
 
diff --git a/lib/rubygems/psych_additions.rb b/lib/rubygems/psych_additions.rb
index 6a46bda..08a5cb3 100644
--- a/lib/rubygems/psych_additions.rb
+++ b/lib/rubygems/psych_additions.rb
@@ -7,12 +7,3 @@ module Psych
   class PrivateType
   end
 end
-# This exists just to satify bugs in marshal'd gemspecs that
-# contain a reference to YAML::PrivateType. We prune these out
-# in Specification._load, but if we don't have the constant, Marshal
-# blows up.
-
-module Psych
-  class PrivateType
-  end
-end
diff --git a/lib/rubygems/psych_tree.rb b/lib/rubygems/psych_tree.rb
index d73541e..eca8249 100644
--- a/lib/rubygems/psych_tree.rb
+++ b/lib/rubygems/psych_tree.rb
@@ -25,30 +25,3 @@ module Gem
     end
   end
 end
-module Gem
-  if defined? ::Psych::Visitors
-    class NoAliasYAMLTree < Psych::Visitors::YAMLTree
-      def visit_String(str)
-        return super unless str == '=' # or whatever you want
-
-        quote = Psych::Nodes::Scalar::SINGLE_QUOTED
-        @emitter.scalar str, nil, nil, false, true, quote
-      end
-
-      # Noop this out so there are no anchors
-      def register(target, obj)
-      end
-
-      # This is ported over from the yaml_tree in 1.9.3
-      def format_time time
-        if time.utc?
-          time.strftime("%Y-%m-%d %H:%M:%S.%9N Z")
-        else
-          time.strftime("%Y-%m-%d %H:%M:%S.%9N %:z")
-        end
-      end
-
-      private :format_time
-    end
-  end
-end
diff --git a/lib/rubygems/remote_fetcher.rb b/lib/rubygems/remote_fetcher.rb
index 9827e66..37699d1 100644
--- a/lib/rubygems/remote_fetcher.rb
+++ b/lib/rubygems/remote_fetcher.rb
@@ -176,7 +176,7 @@ class Gem::RemoteFetcher
 
       begin
         FileUtils.cp source_path, local_gem_path unless
-          File.expand_path(source_path) == File.expand_path(local_gem_path)
+          File.identical?(source_path, local_gem_path)
       rescue Errno::EACCES
         local_gem_path = source_uri.to_s
       end
@@ -321,13 +321,24 @@ class Gem::RemoteFetcher
 
     if https?(uri) and !connection.started? then
       configure_connection_for_https(connection)
-    end
 
-    connection.start unless connection.started?
+      # Don't refactor this with the else branch. We don't want the
+      # http-only code path to not depend on anything in OpenSSL.
+      #
+      begin
+        connection.start
+      rescue OpenSSL::SSL::SSLError, Errno::EHOSTDOWN => e
+        raise FetchError.new(e.message, uri)
+      end
+    else
+      begin
+        connection.start unless connection.started?
+      rescue Errno::EHOSTDOWN => e
+        raise FetchError.new(e.message, uri)
+      end
+    end
 
     connection
-  rescue OpenSSL::SSL::SSLError, Errno::EHOSTDOWN => e
-    raise FetchError.new(e.message, uri)
   end
 
   def configure_connection_for_https(connection)
diff --git a/lib/rubygems/requirement.rb b/lib/rubygems/requirement.rb
index 7abff01..efde4fd 100644
--- a/lib/rubygems/requirement.rb
+++ b/lib/rubygems/requirement.rb
@@ -135,6 +135,7 @@ class Gem::Requirement
       instance_variable_set "@#{ivar}", val
     end
 
+    Gem.load_yaml
     fix_syck_default_key_in_requirements
   end
 
diff --git a/lib/rubygems/specification.rb b/lib/rubygems/specification.rb
index 70a3fd0..1a0130c 100644
--- a/lib/rubygems/specification.rb
+++ b/lib/rubygems/specification.rb
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 #--
 # Copyright 2006 by Chad Fowler, Rich Kilmer, Jim Weirich and others.
 # All rights reserved.
@@ -1720,7 +1721,9 @@ class Gem::Specification
     when Numeric           then obj.inspect
     when true, false, nil  then obj.inspect
     when Gem::Platform     then "Gem::Platform.new(#{obj.to_a.inspect})"
-    when Gem::Requirement  then "Gem::Requirement.new(#{obj.to_s.inspect})"
+    when Gem::Requirement  then
+      list = obj.as_list
+      "Gem::Requirement.new(#{ruby_code(list.size == 1 ? obj.to_s : list)})"
     else raise Gem::Exception, "ruby_code case not handled: #{obj.class}"
     end
   end
@@ -1946,6 +1949,7 @@ class Gem::Specification
       ast = builder.tree
 
       io = StringIO.new
+      io.set_encoding Encoding::UTF_8 if Object.const_defined? :Encoding
 
       Psych::Visitors::Emitter.new(io).accept(ast)
 
diff --git a/lib/rubygems/ssl_certs/Class3PublicPrimaryCertificationAuthority.pem b/lib/rubygems/ssl_certs/Class3PublicPrimaryCertificationAuthority.pem
new file mode 100644
index 0000000..87676ac
--- /dev/null
+++ b/lib/rubygems/ssl_certs/Class3PublicPrimaryCertificationAuthority.pem
@@ -0,0 +1,14 @@
+-----BEGIN CERTIFICATE-----
+MIICPDCCAaUCEHC65B0Q2Sk0tjjKewPMur8wDQYJKoZIhvcNAQECBQAwXzELMAkG
+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz
+cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2
+MDEyOTAwMDAwMFoXDTI4MDgwMTIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV
+BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt
+YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN
+ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE
+BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is
+I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G
+CSqGSIb3DQEBAgUAA4GBALtMEivPLCYATxQT3ab7/AoRhIzzKBxnki98tsX63/Do
+lbwdj2wsqFHMc9ikwFPwTtYmwHYBV4GSXiHx0bH/59AhWM1pF+NEHJwZRDmJXNyc
+AA9WjQKZ7aKQRUzkuxCkPfAyAw7xzvjoyVGM5mKf5p/AfbdynMk2OmufTqj/ZA1k
+-----END CERTIFICATE-----
diff --git a/lib/rubygems/ssl_certs/EntrustnetSecureServerCertificationAuthority.pem b/lib/rubygems/ssl_certs/EntrustnetSecureServerCertificationAuthority.pem
new file mode 100644
index 0000000..4b8939c
--- /dev/null
+++ b/lib/rubygems/ssl_certs/EntrustnetSecureServerCertificationAuthority.pem
@@ -0,0 +1,28 @@
+-----BEGIN CERTIFICATE-----
+MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UEBhMC
+VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50cnVzdC5u
+ZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMc
+KGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5u
+ZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05OTA1
+MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQswCQYDVQQGEwJVUzEUMBIGA1UE
+ChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5j
+b3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBF
+bnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUg
+U2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUA
+A4GLADCBhwKBgQDNKIM0VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/
+I0dNxScZgSYMVHINiC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3
+wkrYKZImZNHkmGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OC
+AdcwggHTMBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHb
+oIHYpIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5
+BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p
+dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVk
+MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp
+b24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNodHRwOi8vd3d3LmVu
+dHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAigA8xOTk5MDUyNTE2MDk0
+MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAU8Bdi
+E1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYEFPAXYhNVPbP/CgBr+1CEl/PtYtAa
+MAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EABAwwChsEVjQuMAMCBJAwDQYJKoZI
+hvcNAQEFBQADgYEAkNwwAvpkdMKnCqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN
+95K+8cPV1ZVqBLssziY2ZcgxxufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd
+2cNgQ4xYDiKWL2KjLB+6rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI=
+-----END CERTIFICATE-----
diff --git a/lib/rubygems/ssl_certs/GeoTrustGlobalCA.pem b/lib/rubygems/ssl_certs/GeoTrustGlobalCA.pem
new file mode 100644
index 0000000..bcb2529
--- /dev/null
+++ b/lib/rubygems/ssl_certs/GeoTrustGlobalCA.pem
@@ -0,0 +1,20 @@
+-----BEGIN CERTIFICATE-----
+MIIDVDCCAjygAwIBAgIDAjRWMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT
+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i
+YWwgQ0EwHhcNMDIwNTIxMDQwMDAwWhcNMjIwNTIxMDQwMDAwWjBCMQswCQYDVQQG
+EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSR2VvVHJ1c3Qg
+R2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2swYYzD9
+9BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9mOSm9BXiLnTjoBbdq
+fnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIuT8rxh0PBFpVXLVDv
+iS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6cJmTM386DGXHKTubU
+1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmRCw7+OC7RHQWa9k0+
+bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5aszPeE4uwc2hGKceeoW
+MPRfwCvocWvk+QIDAQABo1MwUTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTA
+ephojYn7qwVkDBF9qn1luMrMTjAfBgNVHSMEGDAWgBTAephojYn7qwVkDBF9qn1l
+uMrMTjANBgkqhkiG9w0BAQUFAAOCAQEANeMpauUvXVSOKVCUn5kaFOSPeCpilKIn
+Z57QzxpeR+nBsqTP3UEaBU6bS+5Kb1VSsyShNwrrZHYqLizz/Tt1kL/6cdjHPTfS
+tQWVYrmm3ok9Nns4d0iXrKYgjy6myQzCsplFAMfOEVEiIuCl6rYVSAlk6l5PdPcF
+PseKUgzbFbS9bZvlxrFUaKnjaZC2mqUPuLk/IH2uSrW4nOQdtqvmlKXBx4Ot2/Un
+hw4EbNX/3aBd7YdStysVAq45pmp06drE57xNNB6pXE0zX5IJL4hmXXeXxx12E6nV
+5fEWCRE11azbJHFwLJhWC9kXtNHjUStedejV0NxPNO3CBWaAocvmMw==
+-----END CERTIFICATE-----
diff --git a/lib/rubygems/syck_hack.rb b/lib/rubygems/syck_hack.rb
index 1971165..9c6f4a2 100644
--- a/lib/rubygems/syck_hack.rb
+++ b/lib/rubygems/syck_hack.rb
@@ -72,74 +72,3 @@ module Gem
 end
 
 # :startdoc:
-# :stopdoc:
-
-# Hack to handle syck's DefaultKey bug
-#
-# This file is always loaded AFTER either syck or psych are already
-# loaded. It then looks at what constants are available and creates
-# a consistent view on all rubys.
-#
-# All this is so that there is always a YAML::Syck::DefaultKey
-# class no matter if the full yaml library has loaded or not.
-#
-
-module YAML
-  # In newer 1.9.2, there is a Syck toplevel constant instead of it
-  # being underneith YAML. If so, reference it back under YAML as
-  # well.
-  if defined? ::Syck
-    # for tests that change YAML::ENGINE
-    remove_const :Syck if const_defined? :Syck, false
-    
-    Syck = ::Syck
-
-  # JRuby's "Syck" is called "Yecht"
-  elsif defined? YAML::Yecht
-    Syck = YAML::Yecht
-
-  # Otherwise, if there is no YAML::Syck, then we've got just psych
-  # loaded, so lets define a stub for DefaultKey.
-  elsif !defined? YAML::Syck
-    module Syck
-      class DefaultKey
-      end
-    end
-  end
-
-  # Now that we've got something that is always here, define #to_s
-  # so when code tries to use this, it at least just shows up like it
-  # should.
-  module Syck
-    class DefaultKey
-      def to_s
-        '='
-      end
-    end
-  end
-end
-
-# Sometime in the 1.9 dev cycle, the Syck constant was moved from under YAML
-# to be a toplevel constant. So gemspecs created under these versions of Syck
-# will have references to Syck::DefaultKey.
-#
-# So we need to be sure that we reference Syck at the toplevel too so that
-# we can always load these kind of gemspecs.
-#
-if !defined?(Syck)
-  Syck = YAML::Syck
-end
-
-# Now that we've got Syck setup in all the right places, store
-# a reference to the DefaultKey class inside Gem. We do this so that
-# if later on YAML, etc are redefined, we've still got a consistent
-# place to find the DefaultKey class for comparison.
-
-module Gem
-  # for tests that change YAML::ENGINE
-  remove_const :SyckDefaultKey if const_defined? :SyckDefaultKey
-
-  SyckDefaultKey = YAML::Syck::DefaultKey
-end
-
-# :startdoc:
diff --git a/lib/rubygems/test_case.rb b/lib/rubygems/test_case.rb
index 9fbdfca..38fd32a 100644
--- a/lib/rubygems/test_case.rb
+++ b/lib/rubygems/test_case.rb
@@ -1,5 +1,7 @@
 at_exit { $SAFE = 1 }
 
+gem 'minitest', '~> 4.0'
+
 if defined? Gem::QuickLoader
   Gem::QuickLoader.load_full_rubygems_library
 else
@@ -21,6 +23,7 @@ require 'rubygems/test_utilities'
 require 'pp'
 require 'zlib'
 require 'pathname'
+require 'shellwords'
 Gem.load_yaml
 
 require 'rubygems/mock_gem_ui'
@@ -92,6 +95,63 @@ class Gem::TestCase < MiniTest::Unit::TestCase
     refute File.exist?(path), msg
   end
 
+  def scan_make_command_lines(output)
+    output.scan(/^#{Regexp.escape make_command}(?:[[:blank:]].*)?$/)
+  end
+
+  def parse_make_command_line(line)
+    command, *args = line.shellsplit
+
+    targets = []
+    macros = {}
+
+    args.each do |arg|
+      case arg
+      when /\A(\w+)=/
+        macros[$1] = $'
+      else
+        targets << arg
+      end
+    end
+
+    targets << '' if targets.empty?
+
+    {
+      :command => command,
+      :targets => targets,
+      :macros => macros,
+    }
+  end
+
+  def assert_contains_make_command(target, output, msg = nil)
+    if output.match(/\n/)
+      msg = message(msg) {
+        'Expected output containing make command "%s": %s' % [
+          ('%s %s' % [make_command, target]).rstrip,
+          output.inspect
+        ]
+      }
+    else
+      msg = message(msg) {
+        'Expected make command "%s": %s' % [
+          ('%s %s' % [make_command, target]).rstrip,
+          output.inspect
+        ]
+      }
+    end
+
+    assert scan_make_command_lines(output).any? { |line|
+      make = parse_make_command_line(line)
+
+      if make[:targets].include?(target)
+        yield make, line if block_given?
+        true
+      else
+        false
+      end
+    }, msg
+  end
+
   include Gem::DefaultUserInteraction
 
   undef_method :default_test if instance_methods.include? 'default_test' or
@@ -417,6 +477,11 @@ class Gem::TestCase < MiniTest::Unit::TestCase
     end
   end
 
+  def util_remove_gem(spec)
+    FileUtils.rm_rf spec.cache_file
+    FileUtils.rm_rf spec.spec_file
+  end
+
   ##
   # Removes all installed gems from +@gemhome+.
 
diff --git a/lib/rubygems/validator.rb b/lib/rubygems/validator.rb
old mode 100644
new mode 100755
diff --git a/lib/rubygems/version.rb b/lib/rubygems/version.rb
index 2ced9cc..de915d0 100644
--- a/lib/rubygems/version.rb
+++ b/lib/rubygems/version.rb
@@ -145,8 +145,8 @@ class Gem::Version
 
   include Comparable
 
-  VERSION_PATTERN = '[0-9]+(\.[0-9a-zA-Z]+)*' # :nodoc:
-  ANCHORED_VERSION_PATTERN = /\A\s*(#{VERSION_PATTERN})*\s*\z/ # :nodoc:
+  VERSION_PATTERN = '[0-9]+(?>\.[0-9a-zA-Z]+)*' # :nodoc:
+  ANCHORED_VERSION_PATTERN = /\A\s*(#{VERSION_PATTERN})?\s*\z/ # :nodoc:
 
   ##
   # A string representation of this Version.
@@ -187,7 +187,7 @@ class Gem::Version
     raise ArgumentError, "Malformed version number string #{version}" unless
       self.class.correct?(version)
 
-    @version = version.to_s
+    @version = version.to_s.dup
     @version.strip!
   end
 
diff --git a/test/rubygems/test_bundled_ca.rb b/test/rubygems/test_bundled_ca.rb
new file mode 100644
index 0000000..dc4762e
--- /dev/null
+++ b/test/rubygems/test_bundled_ca.rb
@@ -0,0 +1,59 @@
+require 'rubygems/test_case'
+require 'net/https'
+
+# = Testing Bundled CA
+#
+# The tested hosts are explained in detail here: https://github.com/rubygems/rubygems/commit/5e16a5428f973667cabfa07e94ff939e7a83ebd9
+#
+class TestBundledCA < Gem::TestCase
+
+  THIS_FILE = File.expand_path __FILE__
+
+  def bundled_certificate_store
+    store = OpenSSL::X509::Store.new
+
+    ssl_cert_glob =
+      File.expand_path '../../../lib/rubygems/ssl_certs/*.pem', THIS_FILE
+
+    Dir[ssl_cert_glob].each do |ssl_cert|
+      store.add_file ssl_cert
+    end
+
+    store
+  end
+
+  def assert_https(host)
+    if self.respond_to? :_assertions # minitest <= 4
+      self._assertions += 1
+    else # minitest >= 5
+      self.assertions += 1
+    end
+    http = Net::HTTP.new(host, 443)
+    http.use_ssl = true
+    http.verify_mode = OpenSSL::SSL::VERIFY_PEER
+    http.cert_store = bundled_certificate_store
+    http.get('/')
+  rescue Errno::ENOENT
+    skip "#{host} seems offline, I can't tell whether ssl would work."
+  rescue OpenSSL::SSL::SSLError => e
+    # Only fail for certificate verification errors
+    if e.message =~ /certificate verify failed/
+      flunk "#{host} is not verifiable using the included certificates. Error was: #{e.message}"
+    end
+    raise
+  end
+
+  def test_accessing_rubygems
+    assert_https('rubygems.org')
+  end
+
+  def test_accessing_cloudfront
+    assert_https('d2chzxaqi4y7f8.cloudfront.net')
+  end
+
+  def test_accessing_s3
+    assert_https('s3.amazonaws.com')
+  end
+
+end if ENV['TRAVIS']
+
diff --git a/test/rubygems/test_gem_ext_builder.rb b/test/rubygems/test_gem_ext_builder.rb
new file mode 100644
index 0000000..14a77b8
--- /dev/null
+++ b/test/rubygems/test_gem_ext_builder.rb
@@ -0,0 +1,58 @@
+require 'rubygems/test_case'
+require 'rubygems/ext'
+
+class TestGemExtBuilder < Gem::TestCase
+
+  def setup
+    super
+
+    @ext = File.join @tempdir, 'ext'
+    @dest_path = File.join @tempdir, 'prefix'
+
+    FileUtils.mkdir_p @ext
+    FileUtils.mkdir_p @dest_path
+
+    @orig_DESTDIR = ENV['DESTDIR']
+  end
+
+  def teardown
+    ENV['DESTDIR'] = @orig_DESTDIR
+
+    super
+  end
+
+  def test_class_make
+    ENV['DESTDIR'] = 'destination'
+    results = []
+
+    Dir.chdir @ext do
+      open 'Makefile', 'w' do |io|
+        io.puts <<-MAKEFILE
+all:
+\t@#{Gem.ruby} -e "puts %Q{all: \#{ENV['DESTDIR']}}"
+
+install:
+\t@#{Gem.ruby} -e "puts %Q{install: \#{ENV['DESTDIR']}}"
+        MAKEFILE
+      end
+
+      Gem::Ext::Builder.make @dest_path, results
+    end
+
+    results = results.join "\n"
+
+
+    if RUBY_VERSION > '2.0' then
+      assert_match %r%"DESTDIR=#{ENV['DESTDIR']}"$%,         results
+      assert_match %r%"DESTDIR=#{ENV['DESTDIR']}" install$%, results
+    else
+      refute_match %r%"DESTDIR=#{ENV['DESTDIR']}"$%,         results
+      refute_match %r%"DESTDIR=#{ENV['DESTDIR']}" install$%, results
+    end
+
+    assert_match %r%^all: destination$%,     results
+    assert_match %r%^install: destination$%, results
+  end
+
+end
+
diff --git a/test/rubygems/test_gem_ext_configure_builder.rb b/test/rubygems/test_gem_ext_configure_builder.rb
index 65d31f6..6137795 100644
--- a/test/rubygems/test_gem_ext_configure_builder.rb
+++ b/test/rubygems/test_gem_ext_configure_builder.rb
@@ -30,9 +30,9 @@ class TestGemExtConfigureBuilder < Gem::TestCase
 
     assert_equal "sh ./configure --prefix=#{@dest_path}", output.shift
     assert_equal "", output.shift
-    assert_equal make_command, output.shift
+    assert_contains_make_command '', output.shift
     assert_match(/^ok$/m, output.shift)
-    assert_equal make_command + " install", output.shift
+    assert_contains_make_command 'install', output.shift
     assert_match(/^ok$/m, output.shift)
   end
 
@@ -76,8 +76,8 @@ class TestGemExtConfigureBuilder < Gem::TestCase
       Gem::Ext::ConfigureBuilder.build nil, nil, @dest_path, output
     end
 
-    assert_equal make_command, output[0]
-    assert_equal "#{make_command} install", output[2]
+    assert_contains_make_command '', output[0]
+    assert_contains_make_command 'install', output[2]
   end
 
 end
diff --git a/test/rubygems/test_gem_ext_ext_conf_builder.rb b/test/rubygems/test_gem_ext_ext_conf_builder.rb
index c050d82..33398ac 100644
--- a/test/rubygems/test_gem_ext_ext_conf_builder.rb
+++ b/test/rubygems/test_gem_ext_ext_conf_builder.rb
@@ -1,3 +1,5 @@
+# coding: UTF-8
+
 require 'rubygems/test_case'
 require 'rubygems/ext'
 
@@ -25,19 +27,17 @@ class TestGemExtExtConfBuilder < Gem::TestCase
     output = []
 
     Dir.chdir @ext do
-      Gem::Ext::ExtConfBuilder.build 'extconf.rb', nil, @dest_path, output
+      result =
+        Gem::Ext::ExtConfBuilder.build 'extconf.rb', nil, @dest_path, output
+
+      assert_same result, output
     end
 
     assert_match(/^#{Gem.ruby} extconf.rb/, output[0])
     assert_equal "creating Makefile\n", output[1]
-    case RUBY_PLATFORM
-    when /mswin/ then
-      assert_equal "nmake", output[2]
-      assert_equal "nmake install", output[4]
-    else
-      assert_equal "make", output[2]
-      assert_equal "make install", output[4]
-    end
+    assert_contains_make_command '', output[2]
+    assert_contains_make_command 'install', output[4]
+    assert_empty Dir.glob(File.join(@ext, 'siteconf*.rb'))
   end
 
   def test_class_build_rbconfig_make_prog
@@ -54,8 +54,8 @@ class TestGemExtExtConfBuilder < Gem::TestCase
     end
 
     assert_equal "creating Makefile\n", output[1]
-    assert_equal make_command, output[2]
-    assert_equal "#{make_command} install", output[4]
+    assert_contains_make_command '', output[2]
+    assert_contains_make_command 'install', output[4]
   ensure
     RbConfig::CONFIG['configure_args'] = configure_args
   end
@@ -78,7 +78,7 @@ class TestGemExtExtConfBuilder < Gem::TestCase
     end
 
     assert_equal "creating Makefile\n", output[1]
-    assert_equal "anothermake", output[2]
+    assert_contains_make_command '', output[2]
   ensure
     RbConfig::CONFIG['configure_args'] = configure_args
     ENV['make'] = env_make
@@ -108,7 +108,43 @@ class TestGemExtExtConfBuilder < Gem::TestCase
 #{Gem.ruby} extconf.rb.*
 checking for main\(\) in .*?nonexistent/m, error.message)
 
-    assert_match(/^#{Gem.ruby} extconf.rb/, output[0])
+    assert_equal("#{Gem.ruby} extconf.rb", output[0])
+  end
+
+  def test_class_build_unconventional
+    if vc_windows? && !nmake_found?
+      skip("test_class_build skipped - nmake not found")
+    end
+
+    File.open File.join(@ext, 'extconf.rb'), 'w' do |extconf|
+      extconf.puts <<-'EXTCONF'
+include RbConfig
+
+ruby_exe = "#{CONFIG['RUBY_INSTALL_NAME']}#{CONFIG['EXEEXT']}"
+ruby = File.join CONFIG['bindir'], ruby_exe
+
+open 'Makefile', 'w' do |io|
+  io.write <<-Makefile
+all: ruby
+install: ruby
+
+ruby:
+\t#{ruby} -e0
+
+  Makefile
+end
+      EXTCONF
+    end
+
+    output = []
+
+    Dir.chdir @ext do
+      Gem::Ext::ExtConfBuilder.build 'extconf.rb', nil, @dest_path, output
+    end
+
+    assert_contains_make_command '', output[2]
+    assert_contains_make_command 'install', output[4]
+    assert_empty Dir.glob(File.join(@ext, 'siteconf*.rb'))
   end
 
   def test_class_make
@@ -119,6 +155,7 @@ checking for main\(\) in .*?nonexistent/m, error.message)
     output = []
     makefile_path = File.join(@ext, 'Makefile')
     File.open makefile_path, 'w' do |makefile|
+      makefile.puts "# π"
       makefile.puts "RUBYARCHDIR = $(foo)$(target_prefix)"
       makefile.puts "RUBYLIBDIR = $(bar)$(target_prefix)"
       makefile.puts "all:"
@@ -129,17 +166,8 @@ checking for main\(\) in .*?nonexistent/m, error.message)
       Gem::Ext::ExtConfBuilder.make @ext, output
     end
 
-    assert_equal make_command, output[0]
-    assert_equal "#{make_command} install", output[2]
-
-    edited_makefile = <<-EOF
-RUBYARCHDIR = #{@ext}$(target_prefix)
-RUBYLIBDIR = #{@ext}$(target_prefix)
-all:
-install:
-    EOF
-
-    assert_equal edited_makefile, File.read(makefile_path)
+    assert_contains_make_command '', output[0]
+    assert_contains_make_command 'install', output[2]
   end
 
   def test_class_make_no_Makefile
diff --git a/test/rubygems/test_gem_indexer.rb b/test/rubygems/test_gem_indexer.rb
index f5bef8f..80fbb7b 100644
--- a/test/rubygems/test_gem_indexer.rb
+++ b/test/rubygems/test_gem_indexer.rb
@@ -117,6 +117,8 @@ class TestGemIndexer < Gem::TestCase
     assert_indexed @tempdir, "latest_specs.#{@marshal_version}"
     assert_indexed @tempdir, "latest_specs.#{@marshal_version}.gz"
 
+    single_quote = CGI.escapeHTML "'"
+
     expected = <<-EOF
 <?xml version=\"1.0\"?>
 <rss version=\"2.0\">
@@ -227,13 +229,13 @@ class TestGemIndexer < Gem::TestCase
       <description>
 &lt;pre&gt;This line is really, really long.  So long, in fact, that it is more than
 eighty characters long!  The purpose of this line is for testing wrapping
-behavior because sometimes people don't wrap their text to eighty characters.
+behavior because sometimes people don#{single_quote}t wrap their text to eighty characters.
 Without the wrapping, the text might not look good in the RSS feed.
 
 Also, a list:
-  * An entry that's actually kind of sort
-  * an entry that's really long, which will probably get wrapped funny.
-That's ok, somebody wasn't thinking straight when they made it more than
+  * An entry that#{single_quote}s actually kind of sort
+  * an entry that#{single_quote}s really long, which will probably get wrapped funny.
+That#{single_quote}s ok, somebody wasn#{single_quote}t thinking straight when they made it more than
 eighty characters.&lt;/pre&gt;
       </description>
       <author>example@example.com (Example), example2@example.com (Example2)</author>
@@ -494,6 +496,20 @@ eighty characters.&lt;/pre&gt;
                  prerelease_specs
   end
 
+  ##
+  # Emulate the starting state of Gem::Specification in a live environment,
+  # where it will carry the list of system gems
+  def with_system_gems
+    Gem::Specification.reset
+
+    sys_gem = quick_spec 'systemgem', '1.0'
+    util_build_gem sys_gem
+    Gem::Specification.add_spec sys_gem
+    yield
+    util_remove_gem sys_gem
+  end
+
+
   def test_update_index
     use_ui @ui do
       @indexer.generate_index
@@ -518,30 +534,32 @@ eighty characters.&lt;/pre&gt;
     FileUtils.mv @d2_1.cache_file, gems
     FileUtils.mv @d2_1_a.cache_file, gems
 
-    use_ui @ui do
-      @indexer.update_index
-    end
+    with_system_gems do
+      use_ui @ui do
+        @indexer.update_index
+      end
 
-    assert_indexed marshal_quickdir, "#{File.basename(@d2_1.spec_file)}.rz"
+      assert_indexed marshal_quickdir, "#{File.basename(@d2_1.spec_file)}.rz"
 
-    specs_index = Marshal.load Gem.read_binary(@indexer.dest_specs_index)
+      specs_index = Marshal.load Gem.read_binary(@indexer.dest_specs_index)
 
-    assert_includes specs_index, @d2_1_tuple
-    refute_includes specs_index, @d2_1_a_tuple
+      assert_includes specs_index, @d2_1_tuple
+      refute_includes specs_index, @d2_1_a_tuple
 
-    latest_specs_index = Marshal.load \
-      Gem.read_binary(@indexer.dest_latest_specs_index)
+      latest_specs_index = Marshal.load \
+        Gem.read_binary(@indexer.dest_latest_specs_index)
 
-    assert_includes latest_specs_index, @d2_1_tuple
-    assert_includes latest_specs_index,
-                    [@d2_0.name, @d2_0.version, @d2_0.original_platform]
-    refute_includes latest_specs_index, @d2_1_a_tuple
+      assert_includes latest_specs_index, @d2_1_tuple
+      assert_includes latest_specs_index,
+                      [@d2_0.name, @d2_0.version, @d2_0.original_platform]
+      refute_includes latest_specs_index, @d2_1_a_tuple
 
-    pre_specs_index = Marshal.load \
-      Gem.read_binary(@indexer.dest_prerelease_specs_index)
+      pre_specs_index = Marshal.load \
+        Gem.read_binary(@indexer.dest_prerelease_specs_index)
 
-    assert_includes pre_specs_index, @d2_1_a_tuple
-    refute_includes pre_specs_index, @d2_1_tuple
+      assert_includes pre_specs_index, @d2_1_a_tuple
+      refute_includes pre_specs_index, @d2_1_tuple
+    end
   end
 
   def assert_indexed(dir, name)
diff --git a/test/rubygems/test_gem_installer.rb b/test/rubygems/test_gem_installer.rb
index 9b36120..409537d 100644
--- a/test/rubygems/test_gem_installer.rb
+++ b/test/rubygems/test_gem_installer.rb
@@ -229,7 +229,8 @@ load Gem.bin_path('a', 'executable', version)
   def test_generate_bin_bindir_with_user_install_warning
     util_setup_install
 
-    bin_dir = Gem.win_platform? ? File.expand_path(ENV["WINDIR"]) : "/usr/bin"
+    bin_dir = Gem.win_platform? ? File.expand_path(ENV["WINDIR"]).upcase :
+                                  "/usr/bin"
 
     options = {
       :bin_dir => bin_dir,
@@ -747,8 +748,7 @@ load Gem.bin_path('a', 'executable', version)
 
     exe = File.join @gemhome, 'bin', 'executable'
 
-    extra_arg = "\xE4pfel".force_encoding("UTF-8")
-    ARGV.unshift extra_arg
+    ARGV.unshift "\xE4pfel".force_encoding("UTF-8")
 
     begin
       Gem::Specification.reset
@@ -757,7 +757,7 @@ load Gem.bin_path('a', 'executable', version)
         instance_eval File.read(exe)
       end
     ensure
-      ARGV.shift if ARGV.first == extra_arg
+      ARGV.shift if ARGV.first == "\xE4pfel"
     end
 
     assert_match(/ran executable/, e.message)
@@ -1031,6 +1031,46 @@ load Gem.bin_path('a', 'executable', version)
     end
   end
 
+  def test_install_extension_flat
+    skip '1.8 mkmf.rb does not create TOUCH' if RUBY_VERSION < '1.9'
+    @spec.require_paths = ["."]
+
+    @spec.extensions << "extconf.rb"
+
+    write_file File.join(@tempdir, "extconf.rb") do |io|
+      io.write <<-RUBY
+        require "mkmf"
+
+        CONFIG['CC'] = '$(TOUCH) $@ ||'
+        CONFIG['LDSHARED'] = '$(TOUCH) $@ ||'
+
+        create_makefile("#{@spec.name}")
+      RUBY
+    end
+
+    # empty depend file for no auto dependencies
+    @spec.files += %W"depend #{@spec.name}.c".each {|file|
+      write_file File.join(@tempdir, file)
+    }
+
+    so = File.join(@gemhome, 'gems', @spec.full_name, "#{@spec.name}.#{RbConfig::CONFIG["DLEXT"]}")
+    assert !File.exist?(so)
+    use_ui @ui do
+      path = Gem::Builder.new(@spec).build
+
+      @installer = Gem::Installer.new path
+      @installer.install
+    end
+    assert File.exist?(so), so
+  rescue
+    puts '-' * 78
+    puts File.read File.join(@gemhome, 'gems', 'a-2', 'Makefile')
+    puts '-' * 78
+    puts File.read File.join(@gemhome, 'gems', 'a-2', 'gem_make.out')
+    puts '-' * 78
+    raise
+  end
+
   def test_installation_satisfies_dependency_eh
     util_setup_install
 
@@ -1218,7 +1258,7 @@ load Gem.bin_path('a', 'executable', version)
   def test_dir
     util_setup_install
 
-    assert_match @installer.dir, %r!/installer/gems/a-2$!
+    assert_match %r!/installer/gems/a-2$!, @installer.dir
   end
 
   def old_ruby_required
diff --git a/test/rubygems/test_gem_platform.rb b/test/rubygems/test_gem_platform.rb
index f3b94ea..0350d5f 100644
--- a/test/rubygems/test_gem_platform.rb
+++ b/test/rubygems/test_gem_platform.rb
@@ -207,64 +207,71 @@ class TestGemPlatform < Gem::TestCase
   def test_equals_tilde
     util_set_arch 'i386-mswin32'
 
-    assert_match 'mswin32',      Gem::Platform.local
-    assert_match 'i386-mswin32', Gem::Platform.local
+    assert_local_match 'mswin32'
+    assert_local_match 'i386-mswin32'
 
     # oddballs
-    assert_match 'i386-mswin32-mq5.3', Gem::Platform.local
-    assert_match 'i386-mswin32-mq6',   Gem::Platform.local
-    refute_match 'win32-1.8.2-VC7',    Gem::Platform.local
-    refute_match 'win32-1.8.4-VC6',    Gem::Platform.local
-    refute_match 'win32-source',       Gem::Platform.local
-    refute_match 'windows',            Gem::Platform.local
+    assert_local_match 'i386-mswin32-mq5.3'
+    assert_local_match 'i386-mswin32-mq6'
+    refute_local_match 'win32-1.8.2-VC7'
+    refute_local_match 'win32-1.8.4-VC6'
+    refute_local_match 'win32-source'
+    refute_local_match 'windows'
 
     util_set_arch 'i686-linux'
-    assert_match 'i486-linux', Gem::Platform.local
-    assert_match 'i586-linux', Gem::Platform.local
-    assert_match 'i686-linux', Gem::Platform.local
+    assert_local_match 'i486-linux'
+    assert_local_match 'i586-linux'
+    assert_local_match 'i686-linux'
 
     util_set_arch 'i686-darwin8'
-    assert_match 'i686-darwin8.4.1', Gem::Platform.local
-    assert_match 'i686-darwin8.8.2', Gem::Platform.local
+    assert_local_match 'i686-darwin8.4.1'
+    assert_local_match 'i686-darwin8.8.2'
 
     util_set_arch 'java'
-    assert_match 'java',  Gem::Platform.local
-    assert_match 'jruby', Gem::Platform.local
+    assert_local_match 'java'
+    assert_local_match 'jruby'
 
     util_set_arch 'universal-dotnet2.0'
-    assert_match 'universal-dotnet',     Gem::Platform.local
-    assert_match 'universal-dotnet-2.0', Gem::Platform.local
-    refute_match 'universal-dotnet-4.0', Gem::Platform.local
-    assert_match 'dotnet',               Gem::Platform.local
-    assert_match 'dotnet-2.0',           Gem::Platform.local
-    refute_match 'dotnet-4.0',           Gem::Platform.local
+    assert_local_match 'universal-dotnet'
+    assert_local_match 'universal-dotnet-2.0'
+    refute_local_match 'universal-dotnet-4.0'
+    assert_local_match 'dotnet'
+    assert_local_match 'dotnet-2.0'
+    refute_local_match 'dotnet-4.0'
 
     util_set_arch 'universal-dotnet4.0'
-    assert_match 'universal-dotnet',      Gem::Platform.local
-    refute_match 'universal-dotnet-2.0',  Gem::Platform.local
-    assert_match 'universal-dotnet-4.0',  Gem::Platform.local
-    assert_match 'dotnet',                Gem::Platform.local
-    refute_match 'dotnet-2.0',            Gem::Platform.local
-    assert_match 'dotnet-4.0',            Gem::Platform.local
+    assert_local_match 'universal-dotnet'
+    refute_local_match 'universal-dotnet-2.0'
+    assert_local_match 'universal-dotnet-4.0'
+    assert_local_match 'dotnet'
+    refute_local_match 'dotnet-2.0'
+    assert_local_match 'dotnet-4.0'
 
     util_set_arch 'universal-macruby-1.0'
-    assert_match 'universal-macruby',      Gem::Platform.local
-    assert_match 'macruby',                Gem::Platform.local
-    refute_match 'universal-macruby-0.10', Gem::Platform.local
-    assert_match 'universal-macruby-1.0',  Gem::Platform.local
+    assert_local_match 'universal-macruby'
+    assert_local_match 'macruby'
+    refute_local_match 'universal-macruby-0.10'
+    assert_local_match 'universal-macruby-1.0'
 
     util_set_arch 'powerpc-darwin'
-    assert_match 'powerpc-darwin', Gem::Platform.local
+    assert_local_match 'powerpc-darwin'
 
     util_set_arch 'powerpc-darwin7'
-    assert_match 'powerpc-darwin7.9.0', Gem::Platform.local
+    assert_local_match 'powerpc-darwin7.9.0'
 
     util_set_arch 'powerpc-darwin8'
-    assert_match 'powerpc-darwin8.10.0', Gem::Platform.local
+    assert_local_match 'powerpc-darwin8.10.0'
 
     util_set_arch 'sparc-solaris2.8'
-    assert_match 'sparc-solaris2.8-mq5.3', Gem::Platform.local
+    assert_local_match 'sparc-solaris2.8-mq5.3'
   end
 
+  def assert_local_match name
+    assert_match Gem::Platform.local, name
+  end
+
+  def refute_local_match name
+    refute_match Gem::Platform.local, name
+  end
 end
 
diff --git a/test/rubygems/test_gem_remote_fetcher.rb b/test/rubygems/test_gem_remote_fetcher.rb
index 6d370cf..30d49f6 100644
--- a/test/rubygems/test_gem_remote_fetcher.rb
+++ b/test/rubygems/test_gem_remote_fetcher.rb
@@ -815,11 +815,11 @@ gems:
   end
 
   def assert_data_from_server(data)
-    assert_block("Data is not from server") { data =~ /0\.4\.11/ }
+    assert_match(/0\.4\.11/, data, "Data is not from server")
   end
 
   def assert_data_from_proxy(data)
-    assert_block("Data is not from proxy") { data =~ /0\.4\.2/ }
+    assert_match(/0\.4\.2/, data, "Data is not from proxy")
   end
 
   class Conn
diff --git a/test/rubygems/test_gem_requirement.rb b/test/rubygems/test_gem_requirement.rb
index 0bc6ad7..d79cc8e 100644
--- a/test/rubygems/test_gem_requirement.rb
+++ b/test/rubygems/test_gem_requirement.rb
@@ -37,17 +37,19 @@ class TestGemRequirement < Gem::TestCase
   end
 
   def test_parse_bad
-    e = assert_raises ArgumentError do
-      Gem::Requirement.parse nil
-    end
-
-    assert_equal 'Illformed requirement [nil]', e.message
+    [
+      nil,
+      '',
+      '! 1',
+      '= junk',
+      '1..2',
+    ].each do |bad|
+      e = assert_raises ArgumentError do
+        Gem::Requirement.parse bad
+      end
 
-    e = assert_raises ArgumentError do
-      Gem::Requirement.parse ""
+      assert_equal "Illformed requirement [#{bad.inspect}]", e.message
     end
-
-    assert_equal 'Illformed requirement [""]', e.message
   end
 
   def test_prerelease_eh
diff --git a/test/rubygems/test_gem_specification.rb b/test/rubygems/test_gem_specification.rb
index aa648c9..bf8183a 100644
--- a/test/rubygems/test_gem_specification.rb
+++ b/test/rubygems/test_gem_specification.rb
@@ -1,3 +1,5 @@
+# coding: UTF-8
+
 require 'rubygems/test_case'
 require 'stringio'
 require 'rubygems/specification'
@@ -131,7 +133,6 @@ end
   end
 
   def test_self_from_yaml_syck_default_key_bug
-    skip 'syck default_key bug is only for ruby 1.8' unless RUBY_VERSION < '1.9'
     # This is equivalent to (and totally valid) psych 1.0 output and
     # causes parse errors on syck.
     yaml = <<-YAML
@@ -1176,6 +1177,15 @@ end
     assert_equal @a1, same_spec
   end
 
+  def test_to_yaml_encoding
+    @a1.description = 'π'
+
+    yaml_str = @a1.to_yaml
+    same_spec = Gem::Specification.from_yaml(yaml_str)
+
+    assert_equal @a1.description, same_spec.description
+  end
+
   def test_to_yaml_fancy
     @a1.platform = Gem::Platform.local
     yaml_str = @a1.to_yaml
diff --git a/test/rubygems/test_gem_version.rb b/test/rubygems/test_gem_version.rb
index f578063..5d5bf6c 100644
--- a/test/rubygems/test_gem_version.rb
+++ b/test/rubygems/test_gem_version.rb
@@ -33,6 +33,9 @@ class TestGemVersion < Gem::TestCase
     assert_same  fake, Gem::Version.create(fake)
     assert_nil   Gem::Version.create(nil)
     assert_equal v("5.1"), Gem::Version.create("5.1")
+    
+    ver = '1.1'.freeze
+    assert_equal v('1.1'), Gem::Version.create(ver)
   end
 
   def test_eql_eh
@@ -64,12 +67,18 @@ class TestGemVersion < Gem::TestCase
   end
 
   def test_initialize_bad
-    ["junk", "1.0\n2.0"].each do |bad|
-      e = assert_raises ArgumentError do
+    %W[
+      junk
+      1.0\n2.0
+      1..2
+      1.2\ 3.4
+      1-2-3
+    ].each do |bad|
+      e = assert_raises ArgumentError, bad do
         Gem::Version.new bad
       end
 
-      assert_equal "Malformed version number string #{bad}", e.message
+      assert_equal "Malformed version number string #{bad}", e.message, bad
     end
   end
 
